#!/usr/bin/env bash

set -Eeuo pipefail
exitcode=0

    printf "17.4-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-17.4-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "17.4-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-17.4-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "17.4-bullseye-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-17.4-bullseye-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "17.4-bullseye-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-17.4-bullseye-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "16.8-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-16.8-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "16.8-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-16.8-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "16.8-bullseye-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-16.8-bullseye-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "16.8-bullseye-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-16.8-bullseye-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "15.12-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-15.12-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "15.12-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-15.12-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "15.12-bullseye-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-15.12-bullseye-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "15.12-bullseye-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-15.12-bullseye-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "14.17-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-14.17-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "14.17-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-14.17-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "14.17-bullseye-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-14.17-bullseye-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "14.17-bullseye-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-14.17-bullseye-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "13.20-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-13.20-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "13.20-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-13.20-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "13.20-bullseye-postgis-3.5.2: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/postgis:build-cache-13.20-bullseye-postgis-3.5.2' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi

    printf "13.20-bullseye-postgis-3.5.2-pgrouting-3.7.3: "
    output=$(docker run -v $(pwd)/test.sh:/docker-entrypoint-initdb.d/test.sh -e POSTGRES_PASSWORD=password --rm 'localhost:5000/ghcr.io/gui/pgrouting:build-cache-13.20-bullseye-postgis-3.5.2-pgrouting-3.7.3' 2>&1 || true)
    if [[ "$output" =~ "PostGIS Tests: Error" ]]; then
      exitcode=1
      echo "Error"
      echo "$output"
      echo
    elif [[ "$output" =~ "PostGIS Tests: OK" ]]; then
      echo "OK"
    else
      exitcode=1
      echo "Unexpected Error"
      echo "$output"
      echo
    fi


exit "$exitcode"
