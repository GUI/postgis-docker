#!/usr/bin/env ruby

require "erb"
require "fileutils"
require "open-uri"

FileUtils.rm_rf(Dir.glob("[0-9]*"))

docker_image = "nickblah/postgis"
all_postgis_tags = []
versions = {}

library = URI.open("https://raw.githubusercontent.com/docker-library/official-images/master/library/postgres")
  .read
  .split(/[\r\n]{2,}/)
  .select { |lines| lines.include?("Tags:") }
  .map { |lines| Hash[lines.split(/[\r\n]/).map { |r| r.split(/:\s+/, 2) }] }
library.each do |postgres|
  postgres_tags = postgres.fetch("Tags").split(/,\s*/)
  postgres_version_tags = postgres_tags - ["latest"]
  postgres_tag = postgres_version_tags.sort_by { |t| t.length }.last
  postgres_version = postgres_version_tags.sort_by { |t| t.length }.first

  if !postgres.fetch("Directory").include?("alpine")
    system("docker", "pull", "postgres:#{postgres_tag}")
    postgis_packages = `docker run --rm postgres:#{postgres_tag} sh -c 'apt-get update && apt-cache search --full --names-only "^postgresql-$PG_MAJOR-postgis-[0-9\.]+$"'`
      .split(/[\r\n]{2,}/)
      .select { |lines| lines.include?("Package:") }
      .map { |lines| Hash[lines.split(/[\r\n]/).map { |r| r.split(/:\s+/, 2) }] }
      .sort_by { |package| package.fetch("Version") }
      .reverse
    postgis_packages.each_with_index do |postgis_package, postgis_index|
      postgis_major = postgis_package.fetch("Package").split("-postgis-", 2).last
      postgis_version = postgis_package.fetch("Version").match(/^(((\d+)\.\d+)\.\d+)/)

      template = ERB.new(File.read("Dockerfile.erb"), trim_mode: "-").result_with_hash({
        :postgres_tag => postgres_tag,
        :postgis_major => postgis_major,
        :postgis_version => postgis_package.fetch("Version"),
      })

      postgis_tags = postgres_version_tags.map do |postgres_tag|
        tags = [
          "#{postgres_tag}-postgis-#{postgis_version[1]}",
          "#{postgres_tag}-postgis-#{postgis_version[2]}",
          "#{postgres_tag}-postgis-#{postgis_version[3]}",
        ]
      end.flatten.uniq

      if postgres_tags.include?("latest") && postgis_index == 0
        postgis_tags << "latest"
      end

      postgis_tags -= all_postgis_tags
      all_postgis_tags += postgis_tags

      filename = File.join(postgres.fetch("Directory"), "postgis-#{postgis_major}", "Dockerfile")
      FileUtils.mkdir_p(File.dirname(filename))
      File.open(filename, "w") { |f| f.write(template) }

      platforms = ["linux/amd64"]
      # No ARM packages for postgis available for stretch.
      if postgres.fetch("Directory") != "stretch"
        platforms << "linux/arm64"
      end

      versions[postgres_version] ||= {}
      versions[postgres_version][postgis_major] = {
        :postgis_tag => postgis_tags.first,
        :postgis_tags => postgis_tags,
        :filename => filename,
        :platforms => platforms,
      }
    end
  end
end

template = ERB.new(File.read("docker-build.erb"), trim_mode: "-").result_with_hash({
  :docker_image => docker_image,
  :versions => versions,
})
File.open("docker-build", "w") { |f| f.write(template) }
FileUtils.chmod(0755, "docker-build")

template = ERB.new(File.read("docker-push.erb"), trim_mode: "-").result_with_hash({
  :docker_image => docker_image,
  :versions => versions,
})
File.open("docker-push", "w") { |f| f.write(template) }
FileUtils.chmod(0755, "docker-push")

template = ERB.new(File.read("test.erb"), trim_mode: "-").result_with_hash({
  :docker_image => docker_image,
  :versions => versions,
})
File.open("test", "w") { |f| f.write(template) }
FileUtils.chmod(0755, "test")

template = ERB.new(File.read("README.md.erb"), trim_mode: "-").result_with_hash({
  :versions => versions,
})
File.open("README.md", "w") { |f| f.write(template) }
